"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SamlStrategyFactoryProvider = void 0;
const tslib_1 = require("tslib");
// SONAR-IGNORE-ALL
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const https_proxy_agent_1 = require("https-proxy-agent");
const passport_saml_1 = require("@node-saml/passport-saml");
const keys_1 = require("../../keys");
let SamlStrategyFactoryProvider = class SamlStrategyFactoryProvider {
    constructor(verifierSaml) {
        this.verifierSaml = verifierSaml;
    }
    value() {
        return (options, verifier) => this.getSamlStrategyVerifier(options, verifier);
    }
    getSamlStrategyVerifier(options, verifierPassed) {
        const verifyFn = verifierPassed !== null && verifierPassed !== void 0 ? verifierPassed : this.verifierSaml;
        let strategy;
        const func = async (req, profile, cb) => {
            try {
                const user = await verifyFn(profile, cb, req);
                if (!user) {
                    throw new rest_1.HttpErrors.Unauthorized("Invalid Credentials" /* AuthErrorKeys.InvalidCredentials */);
                }
                cb(null, user);
            }
            catch (err) {
                cb(err);
            }
        };
        if (options && options.passReqToCallback === true) {
            strategy = new passport_saml_1.Strategy(options, logoutVerify, 
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            func);
        }
        else {
            strategy = new passport_saml_1.Strategy(options, logoutVerify, 
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            async (profile, cb) => {
                try {
                    const user = await verifyFn(profile, cb);
                    if (!user) {
                        throw new rest_1.HttpErrors.Unauthorized("Invalid Credentials" /* AuthErrorKeys.InvalidCredentials */);
                    }
                    cb(null, user);
                }
                catch (err) {
                    cb(err);
                }
            });
        }
        this._setupProxy(strategy);
        return strategy;
    }
    _setupProxy(strategy) {
        // Setup proxy if any
        let httpsProxyAgent;
        if (process.env['https_proxy']) {
            httpsProxyAgent = new https_proxy_agent_1.HttpsProxyAgent(process.env['https_proxy']);
            strategy._oauth2.setAgent(httpsProxyAgent);
        }
        else if (process.env['HTTPS_PROXY']) {
            httpsProxyAgent = new https_proxy_agent_1.HttpsProxyAgent(process.env['HTTPS_PROXY']);
            strategy._oauth2.setAgent(httpsProxyAgent);
        }
        else {
            //this is intentional
        }
    }
};
SamlStrategyFactoryProvider = tslib_1.__decorate([
    tslib_1.__param(0, (0, core_1.inject)(keys_1.Strategies.Passport.SAML_VERIFIER)),
    tslib_1.__metadata("design:paramtypes", [Function])
], SamlStrategyFactoryProvider);
exports.SamlStrategyFactoryProvider = SamlStrategyFactoryProvider;
function logoutVerify(req, profile, done) {
    // Check if a user is currently authenticated
    if (req.isAuthenticated()) {
        // Log the user out by removing their session data
        req.logout(done);
        // Call the "done" callback to indicate success
        done(null, { message: 'User successfully logged out' });
    }
    else {
        // Call the "done" callback with an error to indicate that the user is not logged in
        done(new Error('User is not currently logged in'));
    }
}
//# sourceMappingURL=saml-strategy-factory-provider.js.map