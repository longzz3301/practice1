import { Provider } from '@loopback/core';
import * as ClientPasswordStrategy from './client-password-strategy';
import { IAuthClient } from '../../../types';
import { VerifyFunction } from '../../types';
export interface ClientPasswordStrategyFactory {
    (options?: ClientPasswordStrategy.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.OauthClientPasswordFn): ClientPasswordStrategy.Strategy;
}
export declare class ClientPasswordStrategyFactoryProvider implements Provider<ClientPasswordStrategyFactory> {
    private readonly verifier;
    constructor(verifier: VerifyFunction.OauthClientPasswordFn);
    value(): ClientPasswordStrategyFactory;
    clientPasswordVerifierHelper(client: IAuthClient | null, clientSecret: string | undefined): void;
    getClientPasswordVerifier(options?: ClientPasswordStrategy.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.OauthClientPasswordFn): ClientPasswordStrategy.Strategy;
}
