import { Provider } from '@loopback/core';
import * as ClientPasswordStrategy from './client-password-strategy';
import { IAuthSecureClient } from '../../../types';
import { VerifyFunction } from '../../types';
export interface SecureClientPasswordStrategyFactory {
    (options?: ClientPasswordStrategy.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.OauthSecureClientPasswordFn): ClientPasswordStrategy.Strategy;
}
export declare class SecureClientPasswordStrategyFactoryProvider implements Provider<SecureClientPasswordStrategyFactory> {
    private readonly verifier;
    constructor(verifier: VerifyFunction.OauthSecureClientPasswordFn);
    value(): SecureClientPasswordStrategyFactory;
    secureClientPasswordVerifierHelper(client: IAuthSecureClient | null, clientSecret: string | undefined): void;
    getSecureClientPasswordVerifier(options?: ClientPasswordStrategy.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.OauthSecureClientPasswordFn): ClientPasswordStrategy.Strategy;
}
